{"title":"Shorthest path Vizualization","markdown":{"yaml":{"title":"Shorthest path Vizualization","execute":{"echo":false},"format":{"html":{"code-fold":true,"code-summary":"Show the code"}}},"headingText":"Choose the first Actor","containsRefs":false,"markdown":"\n\n```{ojs}\n//base https://stackoverflow.com/questions/32527026/shortest-path-in-javascript\nfunction Graph() {\n  var neighbors = this.neighbors = {};\n  this.addEdge = function (u, v, val) {\n    if (neighbors[u] === undefined) {\n      neighbors[u] = [];\n    }\n    neighbors[u].push(({id: v, value: val}));\n    if (neighbors[v] === undefined) {\n      neighbors[v] = [];\n    }           \n    neighbors[v].push(({id: u, value: val}));\n  };\n\n  return this;\n}\n\nfunction shortestPath(graph, source, target) {\n  if (source == target) {\n    return source;\n  }\n  var queue = [ source ],\n      visited = { [source]: true },\n      predecessor = {},\n      tail = 0;\n  while (tail < queue.length) {\n    var u = queue[tail++],\n        neighbors = graph.neighbors[u];\n    for (var i = 0; i < neighbors.length; ++i) {\n      var v = neighbors[i];\n      if (visited[v.id]) {\n        continue;\n      }\n      visited[v.id] = true;\n      if (v.id === target) {\n        var path = [ v ];\n        if (u !== source) {\n          path.push(({id: u, value: v.value}));\n          u = predecessor[u]; \n        }\n        console.log(u)\n        while (u.id !== source) {\n          path.push(u);\n          u = predecessor[u.id];          \n        }\n        path.push(u);\n        path.reverse();\n        return path;\n      }\n      predecessor[v.id] = ({id: u, value: v.value});\n      queue.push(v.id);\n    }\n  }\n  return 'There is no path from ' + source + ' to ' + target;\n}\n```\n\n\n```{ojs}\n//| output: false\nd3 = require(\"d3\")\nunderscore = require(\"underscore\")\nnodes = FileAttachment(\"/data/js_graph/nodes.json\").json()\nnames = nodes.map(x => x.name)\nedges = FileAttachment(\"/data/js_graph/edges.json\").json()\ngraph = new Graph()\nedges.forEach(x => graph.addEdge(x.source, x.target, x.value))\n```\n\n```{ojs}\nviewof search1 = Inputs.search(names)\nviewof actor1 = Inputs.select(underscore.sample(search1, 100))\n```\n\n### Choose the second Actor\n```{ojs}\nviewof search2 = Inputs.search(names)\nviewof actor2 = Inputs.select(underscore.sample(search2, 100))\n```\n\n```{ojs}\nactor1_node = nodes.filter(x => x.name == actor1)[0]\nactor2_node = nodes.filter(x => x.name == actor2)[0]\nactor1_node\nactor2_node\n```\n\n```{ojs}\npathEdges = shortestPath(graph, actor1_node.id, actor2_node.id)\npathEdges\npathNodes = pathEdges.map(x => nodes.filter(y => y.id == x.id)[0])\npathNodes\n```\n\n```{ojs}\ndata = ({\n    nodes: nodes,\n    links: edges,\n})\nDOM.text(\"HEY\")\n/* width = 900;\nheight = 600;\nsvg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n    .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\");\n\nlink = svg\n    .selectAll(\"line\")\n    .data(data.links)\n    .enter()\n    .append(\"line\")\n    .style(\"stroke\", \"#aaa\")\n\nnode = svg\n    .selectAll(\"circle\")\n    .data(data.nodes)\n    .enter()\n    .append(\"circle\")\n    .attr(\"r\", 20)\n    .style(\"fill\", \"#69b3a2\")\n\nsimulation = d3.forceSimulation(data.nodes)\n        .force(\"link\", d3.forceLink()\n        .id(function(d) { return d.id; })\n        .links(data.links)\n    )\n    .force(\"charge\", d3.forceManyBody().strength(-400))\n    .force(\"center\", d3.forceCenter(width / 2, height / 2))\n    .on(\"end\", ticked);\n\nfunction ticked() {\n    link\n    .attr(\"x1\", function(d) { return d.source.x; })\n    .attr(\"y1\", function(d) { return d.source.y; })\n    .attr(\"x2\", function(d) { return d.target.x; })\n    .attr(\"y2\", function(d) { return d.target.y; });\n\n    node\n    .attr(\"cx\", function (d) { return d.x+6; })\n    .attr(\"cy\", function(d) { return d.y-6; });\n} */\n```"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"viz.html"},"language":{"code-summary":"Show the code"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.280","theme":"cosmo","title":"Shorthest path Vizualization"},"extensions":{"book":{"multiFile":true}}}}}