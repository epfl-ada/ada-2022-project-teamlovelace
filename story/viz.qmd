---
title: "Shorthest path Vizualization"
execute:
  echo: false
format:
  html:
    code-fold: true
    code-summary: "Show the code"
---

```{ojs}
// base https://stackoverflow.com/questions/32527026/shortest-path-in-javascript
// wanted to better than a simple bfs but performance seems great
// so leaving this code sample
function Graph() {
  var neighbors = this.neighbors = {};
  this.addEdge = function (u, v, val) {
    if (neighbors[u] === undefined) {
      neighbors[u] = [];
    }
    neighbors[u].push(({id: v, value: val}));
    if (neighbors[v] === undefined) {
      neighbors[v] = [];
    }           
    neighbors[v].push(({id: u, value: val}));
  };

  return this;
}

function shortestPath(graph, source, target) {
  if (source == target) {
    return source;
  }
  var queue = [ source ],
      visited = { [source]: true },
      predecessor = {},
      tail = 0;
  while (tail < queue.length) {
    var u = queue[tail++],
        neighbors = graph.neighbors[u];
    for (var i = 0; i < neighbors.length; ++i) {
      var v = neighbors[i];
      if (visited[v.id]) {
        continue;
      }
      visited[v.id] = true;
      if (v.id === target) {
        var path = [ v ];
        if (u !== source) {
          path.push(({id: u, value: v.value}));
          u = predecessor[u]; 
        }
        console.log(u)
        while (u.id !== source) {
          path.push(u);
          u = predecessor[u.id];          
        }
        path.push(u);
        path.reverse();
        return path;
      }
      predecessor[v.id] = ({id: u, value: v.value});
      queue.push(v.id);
    }
  }
  return 'There is no path from ' + source + ' to ' + target;
}
```


```{ojs}
//| output: false
d3 = require("d3")
underscore = require("underscore")
nodes = FileAttachment("/data/js_graph/nodes.json").json()
names = nodes.map(x => x.name)
edges1 = FileAttachment("/data/js_graph/edges1.json").json()
edges2 = FileAttachment("/data/js_graph/edges2.json").json()
edges = edges1.concat(edges2)
graph = new Graph()
edges.forEach(x => graph.addEdge(x.source, x.target, x.value))
```

### Choose the first Actor
```{ojs}
viewof search1 = Inputs.search(names)
viewof actor1 = Inputs.select(underscore.sample(search1, 100))
```

### Choose the second Actor
```{ojs}
viewof search2 = Inputs.search(names)
viewof actor2 = Inputs.select(underscore.sample(search2, 100))
```

```{ojs}
actor1_node = nodes.filter(x => x.name == actor1)[0]
actor2_node = nodes.filter(x => x.name == actor2)[0]
actor1_node
actor2_node
path
pathNodes
pathEdges
```

```{ojs}
path = shortestPath(graph, actor1_node.id, actor2_node.id)
pathNodes = path.map(x => nodes.filter(y => y.id == x.id)[0])
pathEdges = path.reduce((xs, x) => {
  var last = xs.pop()
  if (last != undefined) {
    xs.push({source: last.id, target: x.id, value: last.value})
  }
  xs.push(x)
  return xs
}, [])
useless = pathEdges.pop()
data = ({
    nodes: pathNodes,
    links: pathEdges,
})
```

```{ojs}
// Copyright 2021 Observable, Inc.
// Released under the ISC license.
// https://observablehq.com/@d3/force-directed-graph
// Modified version !!!
function ForceGraph({
  nodes, // an iterable of node objects (typically [{id}, …])
  links // an iterable of link objects (typically [{source, target}, …])
}, {
  nodeId = d => d.id, // given d in nodes, returns a unique identifier (string)
  nodeGroup, // given d in nodes, returns an (ordinal) value for color
  nodeGroups, // an array of ordinal values representing the node groups
  nodeTitle, // given d in nodes, a title string
  nodeFill = "currentColor", // node stroke fill (if not using a group color encoding)
  nodeStroke = "#fff", // node stroke color
  nodeStrokeWidth = 1.5, // node stroke width, in pixels
  nodeStrokeOpacity = 1, // node stroke opacity
  nodeRadius = 5, // node radius, in pixels
  nodeStrength,
  linkSource = ({source}) => source, // given d in links, returns a node identifier string
  linkTarget = ({target}) => target, // given d in links, returns a node identifier string
  linkStroke = "#999", // link stroke color
  linkStrokeOpacity = 0.6, // link stroke opacity
  linkStrokeWidth = 1.5, // given d in links, returns a stroke width in pixels
  linkStrokeLinecap = "round", // link stroke linecap
  linkStrength,
  colors = d3.schemeTableau10, // an array of color strings, for the node groups
  width = 640, // outer width, in pixels
  height = 400, // outer height, in pixels
  invalidation // when this promise resolves, stop the simulation
} = {}) {
  // Compute values.
  const N = d3.map(nodes, nodeId).map(intern);
  const LS = d3.map(links, linkSource).map(intern);
  const LT = d3.map(links, linkTarget).map(intern);
  if (nodeTitle === undefined) nodeTitle = (_, i) => N[i];
  const T = nodeTitle == null ? null : d3.map(nodes, nodeTitle);
  const G = nodeGroup == null ? null : d3.map(nodes, nodeGroup).map(intern);
  const W = typeof linkStrokeWidth !== "function" ? null : d3.map(links, linkStrokeWidth);
  const L = typeof linkStroke !== "function" ? null : d3.map(links, linkStroke);

  // Replace the input nodes and links with mutable objects for the simulation.
  nodes = d3.map(nodes, (_, i) => ({id: N[i]}));
  links = d3.map(links, (_, i) => ({source: LS[i], target: LT[i]}));

  // Compute default domains.
  if (G && nodeGroups === undefined) nodeGroups = d3.sort(G);

  // Construct the scales.
  const color = nodeGroup == null ? null : d3.scaleOrdinal(nodeGroups, colors);

  // Construct the forces.
  const forceNode = d3.forceManyBody();
  const forceLink = d3.forceLink(links).id(({index: i}) => N[i]);
  if (nodeStrength !== undefined) forceNode.strength(nodeStrength);
  if (linkStrength !== undefined) forceLink.strength(linkStrength);

  const simulation = d3.forceSimulation(nodes)
      .force("link", forceLink)
      .force("charge", forceNode)
      .force("center",  d3.forceCenter())
      .on("tick", ticked);

  const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", [-width / 2, -height / 2, width, height])
      .attr("style", "max-width: 100%; height: auto; height: intrinsic;");

  const link = svg.append("g")
      .attr("stroke", typeof linkStroke !== "function" ? linkStroke : null)
      .attr("stroke-opacity", linkStrokeOpacity)
      .attr("stroke-width", typeof linkStrokeWidth !== "function" ? linkStrokeWidth : null)
      .attr("stroke-linecap", linkStrokeLinecap)
    .selectAll("line")
    .data(links)
    .join("line");

  const node = svg.append("g")
      .attr("fill", nodeFill)
      .attr("stroke", nodeStroke)
      .attr("stroke-opacity", nodeStrokeOpacity)
      .attr("stroke-width", nodeStrokeWidth)
    .selectAll("circle")
    .data(nodes)
    .join("circle")
      .attr("r", nodeRadius)
      .call(drag(simulation));

  if (W) link.attr("stroke-width", ({index: i}) => W[i]);
  if (L) link.attr("stroke", ({index: i}) => L[i]);
  if (G) node.attr("fill", ({index: i}) => color(G[i]));
  if (T) node.append("title").text(({index: i}) => T[i]);
  if (invalidation != null) invalidation.then(() => simulation.stop());

  function intern(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
  }

  function ticked() {
    link
      .attr("x1", d => d.source.x)
      .attr("y1", d => d.source.y)
      .attr("x2", d => d.target.x)
      .attr("y2", d => d.target.y);

    node
      .attr("cx", d => d.x)
      .attr("cy", d => d.y);
  }

  function drag(simulation) {    
    function dragstarted(event) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      event.subject.fx = event.subject.x;
      event.subject.fy = event.subject.y;
    }
    
    function dragged(event) {
      event.subject.fx = event.x;
      event.subject.fy = event.y;
    }
    
    function dragended(event) {
      if (!event.active) simulation.alphaTarget(0);
      event.subject.fx = null;
      event.subject.fy = null;
    }
    
    return d3.drag()
      .on("start", dragstarted)
      .on("drag", dragged)
      .on("end", dragended);
  }

  return Object.assign(svg.node(), {scales: {color}});
}
```


```{ojs}
chart2 = ForceGraph(data, {
  nodeId: d => d.id,
  nodeGroup: d => d.name,
  nodeTitle: d => d.name,
  linkStrokeWidth: 1,
  width,
  height: 600,
  invalidation // a promise to stop the simulation when the cell is re-run
})
```